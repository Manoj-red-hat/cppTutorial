
Polymorphism slicing


"Surely so long as you allocate memory on the heap" - where the memory is 
allocated has nothing to do with it. It's all about the semantics. Take, for instance:

Derived d;
Base* b = &d;
d is on the stack (automatic memory), but polymorphism will still work on b.

If you don't have a base class pointer or reference to a derived class, polymorphism
 doesn't work because you no longer have a derived class. Take

Base c = Derived();
The c object isn't a Derived, but a Base, because of slicing. So, technically, polymorphism
 still works, it's just that you no longer have a Derived object to talk about.

Now take

Base* c = new Derived();
c just points to some place in memory, and you don't really care whether that's actually 
a Base or a Derived, but the call to a virtual method will be resolved dynamically.
_________________________________________________________________________________________________________
Virtual destructors 

Virtual destructors are useful when you can delete an instance of a derived class 
through a pointer to base class:

class Base 
{
    // some virtual methods
};

class Derived : public Base
{
    ~Derived()
    {
        // Do some important cleanup
    }
}
Here, you'll notice that I didn't declare Base's destructor to be virtual. Now, 
let's have a look at the following snippet:

Base *b = new Derived();
// use b
delete b; // Here's the problem!
Since Base's destructor is not virtual and b is a Base* pointing to a Derived object,
delete b has undefined behaviour. In most implementations, the call to the destructor
will be resolved like any non-virtual code, meaning that the destructor of the base 
class will be called but not the one of the derived class, resulting in resources leak.

To sum up, always make base classes' destructors virtual when they're meant to be 
manipulated polymorphically.

If you want to prevent the deletion of an instance through a base class pointer, you 
can make the base class destuctor protected and nonvirtual; by doing so, the compiler 
won't let you call delete on a base class pointer.
_____________________________________________________________________________________________________
virtual constructor

A virtual call is a mechanism to get work done given partial information. In particular,
 "virtual" allows us to call a function knowing only any interfaces and not the exact 
 type of the object. To create an object you need complete information. In particular, 
 you need to know the exact type of what you want to create. Consequently, a "call to 
 a constructor" cannot be virtual.
_____________________________________________________________________________________________________
What is Virtual base class? Explain its uses.

- When two or more objects are derived from a common base class, we can prevent multiple 
copies of the base class being present in an object derived from those objects by declaring 
the base class as virtual when it is being inherited. Such a base class is known as virtual 
base class. This can be achieved by preceding the base class’ name with the word virtual.

______________________________________________________________________________________________________
What is a Pure Virtual Function?

- It is a virtual function that does not have any implementation part.
- It has only declaration part.
- It is declared by assigning the '0' in the declaration part.
_______________________________________________________________________________________________________
STL Iterators. The concept of an iterator is fundamental to understanding the C++ Standard 
Template Library (STL) because iterators provide a means for accessing data stored in container
classes such a vector, map, list, etc.
__________________________________________________________________________________________________________
Sequence Containers

Sequence containers are container classes that maintain the ordering of elements in the container.
A defining characteristic of sequence containers is that you can choose where to insert your element 
by position. The most common example of a sequence container is the array: if you insert four elements
into an array, the elements will be in the exact order you inserted them.

The STL contains 3 sequence containers: vector, deque, and list.

If you’ve ever taken physics, you probably are thinking of a vector as an entity with both magnitude 
and direction. The unfortunately named vector class in the STL is a dynamic array capable of growing 
as needed to contain its elements. The vector class allows random access to its elements via operator[]
, and inserting and removing elements from the end of the vector is generally fast.

Associative Containers

Associative containers are containers that automatically sort their inputs when those 
inputs are inserted into the container. By default, associative containers compare elements 
using operator<.

A set is a container that stores unique elements, with duplicate elements disallowed.
 The elements are sorted according to their values.
A multiset is a set where duplicate elements are allowed.
A map (also called an associative array) is a set where each element is a pair, called 
a key/value pair. The key is used for sorting and indexing the data, and must be unique.
 The value is the actual data.
A multimap (also called a dictionary) is a map that allows duplicate keys. Real-life 
dictionaries are multimaps: the key is the word, and the value is the meaning of the 
word. All the keys are sorted in ascending order, and you can look up the value by key. 
Some words can have multiple meanings, which is why the dictionary is a multimap rather than a map.


Container Adapters

Container adapters are special predefined containers that are adapted to specific uses. 
The interesting part about container adapters is that you can choose which sequence container
 you want them to use.

A stack is a container where elements operate in a LIFO (Last In, First Out) context,
where elements are inserted (pushed) and removed (popped) from the end of the container.
Stacks default to using deque as their default sequence container 
(which seems odd, since vector seems like a more natural fit), but can use vector or list as well.

A queue is a container where elements operate in a FIFO (First In, First Out) context,
where elements are inserted (pushed) to the back of the container and removed (popped) from the
front. Queues default to using deque, but can also use list.

A priority queue is a type of queue where the elements are kept sorted (via operator<). When elements 
are pushed, the element is sorted in the queue. Removing an element from the front returns the highest 
priority item in the priority queue.
_________________________________________________________________________________________________
16.3 — STL iterators overview
BY ALEX ON SEPTEMBER 11TH, 2011 | LAST MODIFIED BY ALEX ON DECEMBER 31ST, 2015
An Iterator is an object that can traverse (iterate over) a container class without the user having to know how the container is implemented. With many classes (particularly lists and the associative classes), iterators are the primary way elements of these classes are accessed.

An iterator is best visualized as a pointer to a given element in the container, with a set of overloaded operators to provide a set of well-defined functions:

Operator* -- Dereferencing the iterator returns the element that the iterator is currently pointing at.
Operator++ -- Moves the iterator to the next element in the container. Most iterators also provide Operator-- to move to the previous element.
Operator== and Operator!= -- Basic comparison operators to determine if two iterators point to the same element. To compare the values that two iterators are pointing at, deference the iterators first, and then use a comparison operator.
Operator= -- Assign the iterator to a new position (typically the start or end of the container’s elements). To assign the value of the element the iterator is point at, deference the iterator first, then use the assign operator.
Each container includes four basic member functions for use with Operator=:

begin() returns an iterator representing the beginning of the elements in the container.
end() returns an iterator representing the element just past the end of the elements.
cbegin() returns a const (read-only) iterator representing the beginning of the elements in the container.
cend() returns a const (read-only) iterator representing the element just past the end of the elements.
It might seem weird that end() doesn’t point to the last element in the list, but this is done primarily to make looping easy: iterating over the elements can continue until the iterator reaches end(), and then you know you’re done.

Finally, all containers provide (at least) two types of iterators:

container::iterator provides a read/write iterator
container::const_iterator provides a read-only iterator
Lets take a look at some examples of using iterators.
_____________________________________________________________________________________________________	

I know references are syntactic sugar, so code is easier to read and write.

But what are the differences?

Summary from answers and links below:

    A pointer can be re-assigned any number of times while a reference can not be re-seated after binding.
    Pointers can point nowhere (NULL), whereas reference always refer to an object.
    You can't take the address of a reference like you can with pointers.
    There's no "reference arithmetics" (but you can take the address of an object pointed by a reference and do pointer arithmetics on it as in &obj + 5).

To clarify a misconception:

    The C++ standard is very careful to avoid dictating how a compiler must implement references, but every C++ compiler implements references as pointers. That is, a declaration such as:

    int &ri = i;

    if it's not optimized away entirely, allocates the same amount of storage as a pointer, and places the address of i into that storage.

So, a pointer and a reference both occupy the same amount of memory.

As a general rule,

    Use references in function parameters and return types to define useful and self-documenting interfaces.
    Use pointers to implement algorithms and data structures.

_______________________________________________________________________________________________________


Polymorphism slicing


"Surely so long as you allocate memory on the heap" - where the memory is 
allocated has nothing to do with it. It's all about the semantics. Take, for instance:

Derived d;
Base* b = &d;
d is on the stack (automatic memory), but polymorphism will still work on b.

If you don't have a base class pointer or reference to a derived class, polymorphism
 doesn't work because you no longer have a derived class. Take

Base c = Derived();
The c object isn't a Derived, but a Base, because of slicing. So, technically, polymorphism
 still works, it's just that you no longer have a Derived object to talk about.

Now take

Base* c = new Derived();
c just points to some place in memory, and you don't really care whether that's actually 
a Base or a Derived, but the call to a virtual method will be resolved dynamically.
_________________________________________________________________________________________________________
Virtual destructors 

Virtual destructors are useful when you can delete an instance of a derived class 
through a pointer to base class:

class Base 
{
    // some virtual methods
};

class Derived : public Base
{
    ~Derived()
    {
        // Do some important cleanup
    }
}
Here, you'll notice that I didn't declare Base's destructor to be virtual. Now, 
let's have a look at the following snippet:

Base *b = new Derived();
// use b
delete b; // Here's the problem!
Since Base's destructor is not virtual and b is a Base* pointing to a Derived object,
delete b has undefined behaviour. In most implementations, the call to the destructor
will be resolved like any non-virtual code, meaning that the destructor of the base 
class will be called but not the one of the derived class, resulting in resources leak.

To sum up, always make base classes' destructors virtual when they're meant to be 
manipulated polymorphically.

If you want to prevent the deletion of an instance through a base class pointer, you 
can make the base class destuctor protected and nonvirtual; by doing so, the compiler 
won't let you call delete on a base class pointer.
_____________________________________________________________________________________________________
virtual constructor

A virtual call is a mechanism to get work done given partial information. In particular,
 "virtual" allows us to call a function knowing only any interfaces and not the exact 
 type of the object. To create an object you need complete information. In particular, 
 you need to know the exact type of what you want to create. Consequently, a "call to 
 a constructor" cannot be virtual.
_____________________________________________________________________________________________________
What is Virtual base class? Explain its uses.

- When two or more objects are derived from a common base class, we can prevent multiple 
copies of the base class being present in an object derived from those objects by declaring 
the base class as virtual when it is being inherited. Such a base class is known as virtual 
base class. This can be achieved by preceding the base classâ€™ name with the word virtual.

______________________________________________________________________________________________________
What is a Pure Virtual Function?

- It is a virtual function that does not have any implementation part.
- It has only declaration part.
- It is declared by assigning the '0' in the declaration part.

